/******************************************************
If the given sequence X = {x1, x2, ..., xm}, then the other sequence Z = {z1, z2, ..., zk}, the subsequence of X refers to the existence of a strictly increasing subscript sequence {i1, i2 ..., ik} such that for all j = 1, 2, ..., k are: zj = xij.
For example, the sequence Z = {B, C, D, B} is the subsequence of the sequence X = {A, B, C, B, D, A, B}, and the corresponding incremental subscripts are {2,3,5 , 7}.
Given two sequences X and Y, Z is the common subsequence of the sequences X and Y when the other sequence Z is both a subsequence of X and a subsequence of Y.
Given the two sequences X = {x1, x2, ..., xm} and Y = {y1, y2, ..., yn}, find the longest common subsequence of X and Y.

若给定序列X={x1,x2,…,xm}，则另一序列Z={z1,z2,…,zk}，是X的子序列是指存在一个严格递增下标序列{i1,i2,…,ik}使得对于所有j=1,2,…,k有：zj=xij。
例如，序列Z={B，C，D，B}是序列X={A，B，C，B，D，A，B}的子序列，相应的递增下标序列为{2，3，5，7}。
给定2个序列X和Y，当另一序列Z既是X的子序列又是Y的子序列时，称Z是序列X和Y的公共子序列。
给定2个序列X={x1,x2,…,xm}和Y={y1,y2,…,yn}，找出X和Y的最长公共子序列。 
********************************************************/

#include<iostream>
using namespace std;

# define NUM 100
int b[NUM][NUM];          //Auxiliary array
int c[NUM][NUM];          //The longest monotonically increasing number of sequences


void LCSLength(int m,int n,const char x[],char B[])   //m&n is row&column
{
    int i,j;
    for(i=0;i<=m;i++) c[i][0]=0;
    for(i=1;i<=n;i++) c[0][i]=0;

    for(i=1;i<=m;i++)
       for(j=1;j<=n;j++)
       {
          if(x[i]==y[i]) {  c[i][j]=c[i-1][j-1]+1; b[i][j]=1;   } //"1" represents ↖
          else if(c[i-1][j]>=c[i][j-1])
                         {   c[i][j]=c[i-1][j];    b[i][j]=2;   } //"2" represents ↑
          else           {   c[i][j]=c[i][j-1];    b[i][j]=3;   } //"3" represents ←
       }
}
void LCS(int i,int j,char x[])
{
    if(i==0||j==0) return;
    if(b[i][j]==1){ LCS(i-1,j-1,x); cout<<x[i]<<" "; }
    else if(b[i][j]==2) LCS(i-1,j,x);
    else LCS(i,j-1,x);
}
int main()
{
    char x[7]={'A','B','C','B','D','A','B'};
    char y[6]={'B','D','C','A','B','A'};
    LCSLength(7,6,x,y);

    LCS(7,6,x);

    cout << "Hello world!" << endl;
    return 0;
}
